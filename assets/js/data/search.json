[ { "title": "새로운 글 작성하기", "url": "/posts/writing-a-new-post/", "categories": "Blogging, Tutorial", "tags": "tutorial", "date": "2021-09-05 11:46:00 +0900", "snippet": "Notice : 이 글은 링크를 참조하여 작성하였습니다.이름과 경로새로운 파일의 이름을 YYYY-MM-DD-TITLE.EXTENSION 으로 만들어서 _posts 폴더 안에 넣어야하고 EXTENSION 은 md 혹은 markdown 중 하나여야 한다.Front Matter기본적으로 파일의 최상단에 아래와 같은 Front Matter 를 채워넣어야 한다.---title: titledate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORY, SUB_CATEGORY]TAGS: [TAG] # TAG 이름은 반드시 소문자여야 한다.--- Note : 파일의 layout 은 기본적으로 post에 세팅이 되어있고 Front Matter 블록에 layout 변수를 추가할 필요는 없다.Timezone of date글의 발매일을 정확하게 기록하기 위해, _config.yml의 timezone을 잘 설정하고 글의 Front Matter 블록 내의 date 에도 timezone 을 넣어야한다.Categories and Tags각 글의 categories는 최대 2개의 요소 포함하도록 설계되었고 태그는 원하는대로 넣어줄 수 있다. 예를 들면 …categories: [Animal, Insect]tags: [bee]Table of Contents기본적으로 Table of Contents 는 글의 오른쪽에 띄워주도록 되어있다.만약 모든 글에 대해 ToC 를 끄고 싶으면 _config.yml의 toc 변수의 값을 false로 변경시키면 된다.만약 특정 글에 대해서만 ToC 를 끄고 싶으면 Front Matter 블록에 toc: false를 아래와 같이 추가해준다.---toc: false---댓글TOC와 비슷하게, Disqus 댓글이 각 글에 기본적으로 로딩된다.만약 모든 글에 댓글 기능을 끄려면 _config.yml 의 comments 변수의 값을 false로 변경해주면 된다.만약 특정 글에 대해서만 댓글 기능을 끄려면 Front Matter 블록에 comments: false를 아래와 같이 추가해준다.---comments: false---Mathematics사이트의 성능상의 이유로, 수학적 특징 혹은 지표들은 기본적으로 로딩되지 않는다. 그러나 아래의 코드를 넣어 로딩시킬수 있다.---math: true---MermaidMermaid는 아주 좋은 다이어그램 생성 도구로 글에서 Mermaid를 활성화시키려면 아래의 YAML 블록을 추가해준다.mermaid: true그러면 다른 markdown 언어처럼 mermaid 를 사용할 수 있다.```mermaid 와 ``` 사이에 그래프 코드를 삽입하면 된다.이미지Preview image글 컨텐츠의 상단에 이미지를 넣고 싶으면, src, width, height, alt 속성을 아래의 예시처럼 명시해주면 된다.image: src: /path/to/image/file width: 1000 # 픽셀단위 height: 500 # 픽셀단위 alt: 이미지가 안 나올 경우 띄울 문구alt 를 제외한 나머지 옵션들은 필수이다. 특히, width 와 height 옵션의 경우, UX와 페이지 로딩 성능과도 연관되어있다.Image caption이미지의 다음줄에 이태릭 글자를 넣으면 그 글자는 caption(자막)이 되고 이미지의 아래에 나타난다.![img-description](/path/to/image)_Image Caption_Image size이미지 로딩시 페이지 내용 레이아웃이 이동하지 않도록 하려 각 이미지에 width 와 height 를 설정해야한다.![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot;}Image position기본적으로 이미지는 중앙에 위치하지만 normal, left, right 중 하나를 골라 위치를 명시해줄 수 있다. Normal Position ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } Limitation : 이미지 위치를 명시하면 Image caption 을 사용할 수 없다. Image shadow프로그램 창의 스크린샷은 그림자 효과를 보여주는 것으로 간주할 수 있고 그림자는 light 모드에서 볼 수 있다.![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLCDN 에 이미지를 호스트했다면, _config.yml 의 img_cdn 변수에 값을 할당하여 반복적으로 CDN url 을 쓰는 시간을 절약할 수 있다.img_cdn: https://cdn.comimg_cdn 이 한번 할당되면, CDN url 은 / 로 시작하는 모든 이미지의 경로에 추가될 것이다.예를 들면, 아래와 같이 이미지를 사용할 경우:![The flower](/path/to/flower.png)parsing 의 결과에는 아래와 같이 자동으로 CDN prefix 인 https://cdn.com 이 이미지 경로 앞에 붙어서 나온다.&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Pinned Posts홈페이지 상단에 원하는 만큼의 글을 고정시킬 수 있고 고정된 글은 발행일 역순으로 정렬된다.아래의 코드를 Front Matter 블록에 추가한다.---pin: true---Code Block마크다운 기호 ``` 를 사용하여 코드 블록을 쉽게 만들 수 있다.This is a common code snippet, without syntax highlight and line number.Specific Language```language 를 사용하여 언어에 맞게 문법 강조와 줄에 순서를 표시한 코드 블록을 만들 수 있다. Note : Jekyll style 인 {% highlight LANGUAGE %) 혹은 {% highlight LANGUAGE linenos %}는 이 테마에서는 사용할 수 없다.# Yaml code snippetitems: - part_no: A4786 descrip: Water Bucket (Filled) price: 1.47 quantity: 4Liquid CodesLiquid snippet 을 띄우고 싶다면 {% raw %} 와 {% endraw %} 사이에 liquid code 를 삽입하면 된다.{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack{% endif %}Learn More이 테마에 대해 더 많은 것을 알고 싶다면 Jekyll Docs: Posts를 방문하면 된다." }, { "title": "블로그 시작해보기 (With Jekyll Chirpy Theme)", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "tutorial", "date": "2021-09-04 22:46:00 +0900", "snippet": "Notice : 이 글은 링크를 참조하여 작성하였습니다.전제조건 링크로 들어가서 요구사항에 맞는 Ruby, RubyGems, Jekyll, Bundler를 설치한다. Ruby의 버전은 반드시 RubyGems.prg의 테마 요구사항을 충족시켜야한다.설치테마 설치에는 두가지 방식이 있다. Install from RubyGems - 업데이트 하기 쉽다고 한다. (저는 시도 안해봤습니다.) Fork on GitHub - 업데이트는 어렵지만 개발 상의 편리함이 있어서 웹 개발자들에게 좋아보인다고 한다.Install from RubyGemsNotice : 이 부분은 제가 시도해 본 것이 아니라 그냥 번역만 한 것이기 때문에 부디 저를 믿지 마시기 바랍니다. 나만의 Jekyll site 의 Gemfile에 아래의 ruby 명령어를 추가한다. gem &quot;jekyll-theme-chirpy&quot; 나만의 Jekyll site 의 _config.yml 파일에 아래를 yaml 코드를 추가한다. theme: jekyll-theme-chirpy 그 다음 실행시킨다. $ bundle 설치된 로컬 테마 경로로 이동한다. $ cd &quot;$(bundle info --path jekyll-theme-chirpy)&quot; 테마 gem에서 중요 파일들을 나만의 Jekyll site 에 복사한다. (자세한 사항은 링크를 참고 ⚠️ 복사 파일들을 조심하라고 한다. 나만의 Jekyll site 가 jekyll new 명령어를 통해 만들어졌다면, 나의 Jekyll site 의 root 디렉토리에 index.markdown, about.markdown 파일이 있을 텐데 이 2개의 파일을 없애거나 링크의 index.html 과 _tabs/about.html 파일로 각각 덮어씌우기를 권장한다.Fork on GitHub먼저 깃허브에 있는 Chirpy를 Fork 하여 나의 레포지토리로 가져오고 나의 로컬에 clone 한다. (기본 branch 코드가 development에 있는지 확인하고 블로그가 안정적이기를 바란다면 latest tag로 변경하고 글을 쓰라고 한다.) Fork 로컬에 clone : 아래 명령어 실행 $ git clone https://github.com/(username)/(username).github.io 그 다음, 아래 명령어로 gem dependencies 를 설치한다.$ bundle그리고 아래 명령어를 실행한다.$ bash tools/init.sh Note : deploy를 할 생각이 없다면 위의 명령어에서 --no-gh 옵션을 붙여서 실행한다.해당 명령어가 수행하는 것들은 아래와 같다. 나의 레포지토리에서 아래의 파일들과 폴더를 없앤다. .travis.yml _posts 아래의 파일들 docs 폴더 --no-gh 옵션을 사용했다면, .github 폴더는 사라지고 그렇지 하지 않으면 .github/workflows/pages-deploy.yml.hook 파일의 .hook 확장자를 제거하여 GitHub Action 의 워크플로우를 설정한다. 변화를 저장하는 commit 을 자동으로 생성한다.사용설정_config.yml 파일의 변수들을 원하는대로 변경하는데 아래의 옵션들은 변경하는걸 권장한다. url : ‘https://(username).github.io’ avatar : PC 기준, 홈페이지의 왼쪽 상단에 있는 이미지의 경로를 넣어준다. timezone : 한국인은 ‘Asia/Seoul’ 로 지정하면 편하다. lang : 기본으로 en으로 설정되어 있는데 바꾸지 않아도 한글이 잘되는 것 같다.Style-sheet 커스텀style-sheet 를 커스텀하고 싶다면, 테마의 assets/css/style.scss 를 나의 Jekyll site 의 같은 경로에 복사하고 해당 파일의 끝에 나만의 custom style 을 추가한다.v4.1.0 으로 시작하며, _sass/addon/variables.scss 에 정의되어 있는 SASS 변수들을 덮어씌우고 싶다면, 새 파일 _sass/variables-hook.scss 을 추가하고 덮어씌우려는 변수에 새로운 값들을 할당하면 된다.로컬 서버에서 실행하기블로그를 정식으로 오픈하기전 내 블로그의 내용들을 확인하고 싶을 수 있다. 아래의 명령어들 중 하나를 선택해 로컬에서 블로그를 띄우고 블로그 상태를 확인하면서 글을 써보자.$ bundle exec jekyll serve혹은 아래의 명령어를 통해 docker 를 이용할 수도 있다.$ docker run -it -rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; -p 4000:4000 jekyll/jekyll \\ jekyll serve명령어를 실행하면 http://localhost:4000에서 블로그 상태를 확인할 수 있다.Deployment Deployment? 내 블로그를 실제로 서비스해보자!먼저 deploy를 하기 전, _config.yml 파일에서 url 에 올바른 옵션을 주었는지 꼭 체크해야한다. 커스텀 도메인 말고 project site 를 선호하거나 GitHub Pages 외의 웹 서버에서 base URL 을 통해 블로그에 방문하고 싶은 경우, baseurl 을 슬래쉬(/)로 시작하는 프로젝트 이름으로 변경해야 한다. (예를 들면 /project-name)이제, 나의 Jekyll site 를 deploy 하기 위해 아래의 방법들 중 하나를 선택한다.1. GitHub Pages 에 Deploy 하기보안 상의 이유로, GitHub Pages 는 safe 모드로 빌드를 하는데 이는 플러그인 사용과 추가적인 페이지 파일 생성을 막는다. 그러므로, site 빌드를 위해 GitHub Actions를 사용할 수 있고 새로운 브랜치에 빌드된 site 파일들을 보관할 수 있으며 그 브랜치를 GH Pages 서비스의 원천으로 사용한다.GitHub Actions 빌드를 위해 필요한 파일들을 빠르게 체크: Jekyll site가 .github/workflows/pages-deploy.yml 파일을 가지고 있는지 확인해서 없으면 해당 파일을 새로 만들어서 링크의 내용을 복붙한다. tools/test.sh 파일과 tools/deploy.sh 파일이 있는지 확인하고 없으면 링크에서 가져온다.그리고 레포지토리의 이름을 &amp;lt;GH-USERNAME&amp;gt;.github.io로 변경한다.이제 아래의 순서에 따라 Jekyll site 를 서비스해보자: 아무 commit 이나 push 하여 GitHub Actions workflow 를 동작시켜보자. 빌드가 성공적으로 완료되면 gh-pages 라는 새로운 브랜치가 빌드된 사이트 파일에 저장되어 나타날 것이다. 레포지토리의 Settings → Options → GitHub Pages 에 들어가서 Source 의 브랜치를 gh-pages로 바꾸고 save 버튼을 누른다. 나의 웹사이트에 접속해본다.2. 다른 플랫폼에 Deploy 하기GitHub 외의 플랫폼의 경우, GitHub Actions의 편리함을 사용할 수 없다. 그러므로 site 를 로컬이나 서드 파티 CI 플랫폼에서 빌드하여 사용자가 쓰려는 플랫폼의 서버에 site 파일들을 넣어주어야 한다.소스 프로젝트의 루트로 가서, 아래의 명령어를 실행해 site 를 빌드한다.$ JEKYLL_ENV=production bundle exec jekyll b혹은 docker 를 가지고 site 를 빌드할 수도 있다.$ docker run --it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll build만약 output 경로를 명시하지 않으면, 생성된 site 파일들이 프로젝트 루트 폴더의 _site 폴더에 있을 것이다. 그럼 그 파일들을 웹서버에 업로드하면 된다." }, { "title": "나만의 favicon 적용해보기", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "tutorial", "date": "2021-09-04 21:58:00 +0900", "snippet": "Notice : 이 글은 링크를 참조하여 작성하였습니다.favicon 파일들은 assets/img/favicons/ 디렉토리 아래에 저장되어야한다. 그래서 나만의 favicon 파일들을 만들어 해당 디렉토리 아래에 집어넣으면 되는데 Chirpy 에서는 아래의 방식으로 favicon 파일을 만들 것을 권장하고 있다.Generate the favicons Real Favicon Generator에서 요구하는 파일 확장자의 정사각형의 이미지를 준비한다. Select your Favicon버튼을 눌러 준비한 이미지를 업로드한다. 업로드 후 페이지의 제일 아래로 내려가서 Generate your Favicons and HTML code 버튼을 누른다. Favicon package 버튼을 눌러 압축 파일을 다운받는다.Replace다운로드 받은 압축 파일을 풀고 favicon 파일들은 그대로 두고 아래의 파일들은 지운다. browserconfig.xml site.webmanifest나머지 남은 파일들을 assets/img/favicons/ 디렉토리 아래로 옮긴다.이렇게 하고 빌드를 하면 다음 버전에 favicon 파일들이 적용된 것을 확인할 수 있다.아래의 표는 png 파일과 ico 파일은 제시한 온라인 도구를 사용하라는 것이고 browserconfig.xml 파일과 site.webmanifest 파일은 기존 파일을 사용하라는 것으로 받아들이면 될 것 같다." } ]
